generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sessionId    String   @id @map("session_id") @db.VarChar(6)
  adminId      String   @map("admin_id") @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  
  selectedPlatforms Json @default("[]") @map("selected_platforms")
  viewingMode       String? @map("viewing_mode") @db.VarChar(20)

  // ðŸ†• DODANE: Limit uczestnikÃ³w
  maxParticipants   Int @default(8) @map("max_participants")

  // ðŸ”„ ROZSZERZONE: Nowe statusy dla multi-user flow
  // MoÅ¼liwe wartoÅ›ci: "setup", "recruiting", "collecting_profiles", "quiz_active", "quiz", "results"
  status      String @default("setup") @db.VarChar(20)
  currentStep String @default("platforms") @map("current_step") @db.VarChar(50)

  // ðŸŽ¯ Relacja do profili
  profiles SessionProfile[]

  @@map("sessions")
}

// ðŸŽ¯ PROSTA TABELA: Jeden standard dla IG i LinkedIn
model SessionProfile {
  id        Int      @id @default(autoincrement())
  sessionId String   @map("session_id") @db.VarChar(6)
  userId    String   @map("user_id") @db.VarChar(50)

  // ðŸŽ¯ PROSTY STANDARD - te same pola dla IG i LinkedIn
  platform    String  @db.VarChar(20)        // 'instagram' | 'linkedin'
  username    String  @db.Text               // @username dla IG, publicIdentifier dla LinkedIn
  pic_url     String? @map("pic_url") @db.Text        // URL do zdjÄ™cia profilowego
  posts       String? @db.Text               // Info o postach/aktywnoÅ›ci (jako text)
  quiz_result Json?   @map("quiz_result") @default("{}")   // Wyniki quizu (JSON)
  seen        String[] @default([])          // Lista widzianych rzeczy

  // ðŸ†• NOWE POLA: Social Media Analysis
  social_posts           Json?     @map("social_posts")              // Tablica oczyszczonych tekstÃ³w postÃ³w
  social_analysis_status String?   @map("social_analysis_status") @db.VarChar(20)  // 'pending' | 'in_progress' | 'completed' | 'failed'
  social_analysis_error  String?   @map("social_analysis_error") @db.Text          // Opis bÅ‚Ä™du jeÅ›li wystÄ…piÅ‚
  social_analyzed_at     DateTime? @map("social_analyzed_at")                      // Timestamp ukoÅ„czenia analizy

  // Metadane
  isAdmin     Boolean  @default(false) @map("is_admin")

  // ðŸ†• DODANE: Tracking czy user aktywnie doÅ‚Ä…czyÅ‚ (vs tylko invited)
  hasJoined   Boolean  @default(false) @map("has_joined")

  createdAt   DateTime @default(now()) @map("created_at")

  // ðŸŽ¯ RELACJA: KaÅ¼dy profil naleÅ¼y do sesji
  session Session @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  // ðŸŽ¯ UNIQUE: Jeden profil per user per session
  @@unique([sessionId, userId])
  @@map("session_profiles")
}